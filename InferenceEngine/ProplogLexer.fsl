{
module ProplogLexer

open System
open System.Text
open ProplogParser
open Microsoft.FSharp.Text.Lexing

let keyword s = 
    match s with
    | _           -> ID s  
}

// These are some regular expression definitions
let digit = ['0'-'9']
let whitespace = [' ' '\t' ]
let newline = ('\n' | '\r' '\n')
let char = ['A'-'Z' 'a'-'z']
let int = digit+
let identifier  = char(char|digit|['_'])*
let quote                 = '\"'
let StringConst           = quote ([^'\"'])* quote


rule tokenize = 
  parse
  | whitespace  { tokenize lexbuf }
  | newline     { lexbuf.EndPos <- lexbuf.EndPos.NextLine; tokenize lexbuf }
  | "("         { LPAR  } 
  | ")"         { RPAR  }
  | "v"         { DISJ  }
  | "^"         { CONJ }
  | "<->"		{ BIIM   }
  | "->"        { IMPL }
  | "<-"        { RIMPL }
  | "-"			{ NEG }
  | identifier  { keyword(Encoding.UTF8.GetString(lexbuf.Lexeme)) }
  | eof         { EOF }
