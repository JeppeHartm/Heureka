// Implementation file for parser generated by fsyacc
module ProplogParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "G:\Users\Jeppe\Documents\Visual Studio 2012\Projects\Heureka\InferenceEngine\ProplogParser.fsy"
 
open Heureka.Proplog

# 10 "G:\Users\Jeppe\Documents\Visual Studio 2012\Projects\Heureka\InferenceEngine\ProplogParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | LPAR
  | RPAR
  | NEG
  | IMPL
  | RIMPL
  | BIIM
  | DISJ
  | CONJ
  | ID of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_NEG
    | TOKEN_IMPL
    | TOKEN_RIMPL
    | TOKEN_BIIM
    | TOKEN_DISJ
    | TOKEN_CONJ
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM__startExp
    | NONTERM__startOp
    | NONTERM_Main
    | NONTERM_Exp
    | NONTERM_Op

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | LPAR  -> 1 
  | RPAR  -> 2 
  | NEG  -> 3 
  | IMPL  -> 4 
  | RIMPL  -> 5 
  | BIIM  -> 6 
  | DISJ  -> 7 
  | CONJ  -> 8 
  | ID _ -> 9 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_LPAR 
  | 2 -> TOKEN_RPAR 
  | 3 -> TOKEN_NEG 
  | 4 -> TOKEN_IMPL 
  | 5 -> TOKEN_RIMPL 
  | 6 -> TOKEN_BIIM 
  | 7 -> TOKEN_DISJ 
  | 8 -> TOKEN_CONJ 
  | 9 -> TOKEN_ID 
  | 12 -> TOKEN_end_of_input
  | 10 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM__startExp 
    | 2 -> NONTERM__startOp 
    | 3 -> NONTERM_Main 
    | 4 -> NONTERM_Exp 
    | 5 -> NONTERM_Exp 
    | 6 -> NONTERM_Exp 
    | 7 -> NONTERM_Exp 
    | 8 -> NONTERM_Op 
    | 9 -> NONTERM_Op 
    | 10 -> NONTERM_Op 
    | 11 -> NONTERM_Op 
    | 12 -> NONTERM_Op 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 12 
let _fsyacc_tagOfErrorTerminal = 10

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | NEG  -> "NEG" 
  | IMPL  -> "IMPL" 
  | RIMPL  -> "RIMPL" 
  | BIIM  -> "BIIM" 
  | DISJ  -> "DISJ" 
  | CONJ  -> "CONJ" 
  | ID _ -> "ID" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | NEG  -> (null : System.Object) 
  | IMPL  -> (null : System.Object) 
  | RIMPL  -> (null : System.Object) 
  | BIIM  -> (null : System.Object) 
  | DISJ  -> (null : System.Object) 
  | CONJ  -> (null : System.Object) 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 0us; 65535us; 0us; 65535us; 1us; 65535us; 0us; 1us; 10us; 65535us; 0us; 6us; 2us; 3us; 4us; 19us; 8us; 9us; 11us; 12us; 21us; 15us; 22us; 16us; 23us; 17us; 24us; 18us; 25us; 20us; 10us; 65535us; 0us; 14us; 2us; 14us; 4us; 5us; 8us; 14us; 11us; 14us; 21us; 14us; 22us; 14us; 23us; 14us; 24us; 14us; 25us; 14us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 2us; 3us; 5us; 16us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 6us; 1us; 8us; 9us; 10us; 11us; 12us; 1us; 2us; 2us; 2us; 7us; 6us; 3us; 8us; 9us; 10us; 11us; 12us; 1us; 3us; 1us; 4us; 6us; 4us; 8us; 9us; 10us; 11us; 12us; 1us; 4us; 1us; 5us; 6us; 5us; 8us; 9us; 10us; 11us; 12us; 1us; 6us; 1us; 7us; 6us; 8us; 8us; 9us; 10us; 11us; 12us; 6us; 8us; 9us; 9us; 10us; 11us; 12us; 6us; 8us; 9us; 10us; 10us; 11us; 12us; 6us; 8us; 9us; 10us; 11us; 11us; 12us; 5us; 8us; 9us; 10us; 11us; 12us; 6us; 8us; 9us; 10us; 11us; 12us; 12us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 12us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 13us; 15us; 18us; 25us; 27us; 29us; 36us; 38us; 40us; 47us; 49us; 51us; 58us; 65us; 72us; 79us; 85us; 92us; 94us; 96us; 98us; 100us; |]
let _fsyacc_action_rows = 26
let _fsyacc_actionTableElements = [|3us; 32768us; 1us; 8us; 3us; 11us; 9us; 13us; 0us; 49152us; 3us; 32768us; 1us; 8us; 3us; 11us; 9us; 13us; 5us; 49152us; 4us; 23us; 5us; 24us; 6us; 25us; 7us; 22us; 8us; 21us; 3us; 32768us; 1us; 8us; 3us; 11us; 9us; 13us; 5us; 49152us; 4us; 16391us; 5us; 16391us; 6us; 16391us; 7us; 16391us; 8us; 16391us; 6us; 32768us; 0us; 7us; 4us; 23us; 5us; 24us; 6us; 25us; 7us; 22us; 8us; 21us; 0us; 16387us; 3us; 32768us; 1us; 8us; 3us; 11us; 9us; 13us; 6us; 32768us; 2us; 10us; 4us; 23us; 5us; 24us; 6us; 25us; 7us; 22us; 8us; 21us; 0us; 16388us; 3us; 32768us; 1us; 8us; 3us; 11us; 9us; 13us; 2us; 16389us; 7us; 22us; 8us; 21us; 0us; 16390us; 0us; 16391us; 2us; 16392us; 7us; 22us; 8us; 21us; 2us; 16393us; 7us; 22us; 8us; 21us; 4us; 16394us; 4us; 23us; 5us; 24us; 7us; 22us; 8us; 21us; 2us; 16395us; 7us; 22us; 8us; 21us; 5us; 32768us; 4us; 23us; 5us; 24us; 6us; 25us; 7us; 22us; 8us; 21us; 5us; 16396us; 4us; 23us; 5us; 24us; 6us; 25us; 7us; 22us; 8us; 21us; 3us; 32768us; 1us; 8us; 3us; 11us; 9us; 13us; 3us; 32768us; 1us; 8us; 3us; 11us; 9us; 13us; 3us; 32768us; 1us; 8us; 3us; 11us; 9us; 13us; 3us; 32768us; 1us; 8us; 3us; 11us; 9us; 13us; 3us; 32768us; 1us; 8us; 3us; 11us; 9us; 13us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 4us; 5us; 9us; 15us; 19us; 25us; 32us; 33us; 37us; 44us; 45us; 49us; 52us; 53us; 54us; 57us; 60us; 65us; 68us; 74us; 80us; 84us; 88us; 92us; 96us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 2us; 3us; 2us; 1us; 1us; 3us; 3us; 3us; 3us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 4us; 4us; 4us; 4us; 5us; 5us; 5us; 5us; 5us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 65535us; 65535us; 65535us; 65535us; 16387us; 65535us; 65535us; 16388us; 65535us; 65535us; 16390us; 16391us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; |]
let _fsyacc_reductions ()  =    [| 
# 136 "G:\Users\Jeppe\Documents\Visual Studio 2012\Projects\Heureka\InferenceEngine\ProplogParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startMain));
# 145 "G:\Users\Jeppe\Documents\Visual Studio 2012\Projects\Heureka\InferenceEngine\ProplogParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startExp));
# 154 "G:\Users\Jeppe\Documents\Visual Studio 2012\Projects\Heureka\InferenceEngine\ProplogParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startOp));
# 163 "G:\Users\Jeppe\Documents\Visual Studio 2012\Projects\Heureka\InferenceEngine\ProplogParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 28 "G:\Users\Jeppe\Documents\Visual Studio 2012\Projects\Heureka\InferenceEngine\ProplogParser.fsy"
                                                                _1 
                   )
# 28 "G:\Users\Jeppe\Documents\Visual Studio 2012\Projects\Heureka\InferenceEngine\ProplogParser.fsy"
                 : expression));
# 174 "G:\Users\Jeppe\Documents\Visual Studio 2012\Projects\Heureka\InferenceEngine\ProplogParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 31 "G:\Users\Jeppe\Documents\Visual Studio 2012\Projects\Heureka\InferenceEngine\ProplogParser.fsy"
                                                         _2 
                   )
# 31 "G:\Users\Jeppe\Documents\Visual Studio 2012\Projects\Heureka\InferenceEngine\ProplogParser.fsy"
                 : expression));
# 185 "G:\Users\Jeppe\Documents\Visual Studio 2012\Projects\Heureka\InferenceEngine\ProplogParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "G:\Users\Jeppe\Documents\Visual Studio 2012\Projects\Heureka\InferenceEngine\ProplogParser.fsy"
                                           Negation (_2) 
                   )
# 32 "G:\Users\Jeppe\Documents\Visual Studio 2012\Projects\Heureka\InferenceEngine\ProplogParser.fsy"
                 : expression));
# 196 "G:\Users\Jeppe\Documents\Visual Studio 2012\Projects\Heureka\InferenceEngine\ProplogParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "G:\Users\Jeppe\Documents\Visual Studio 2012\Projects\Heureka\InferenceEngine\ProplogParser.fsy"
                                          Literal (_1) 
                   )
# 33 "G:\Users\Jeppe\Documents\Visual Studio 2012\Projects\Heureka\InferenceEngine\ProplogParser.fsy"
                 : expression));
# 207 "G:\Users\Jeppe\Documents\Visual Studio 2012\Projects\Heureka\InferenceEngine\ProplogParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "G:\Users\Jeppe\Documents\Visual Studio 2012\Projects\Heureka\InferenceEngine\ProplogParser.fsy"
                                       _1 
                   )
# 34 "G:\Users\Jeppe\Documents\Visual Studio 2012\Projects\Heureka\InferenceEngine\ProplogParser.fsy"
                 : expression));
# 218 "G:\Users\Jeppe\Documents\Visual Studio 2012\Projects\Heureka\InferenceEngine\ProplogParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "G:\Users\Jeppe\Documents\Visual Studio 2012\Projects\Heureka\InferenceEngine\ProplogParser.fsy"
                                                                Conjunction (_1,_3) 
                   )
# 37 "G:\Users\Jeppe\Documents\Visual Studio 2012\Projects\Heureka\InferenceEngine\ProplogParser.fsy"
                 : expression));
# 230 "G:\Users\Jeppe\Documents\Visual Studio 2012\Projects\Heureka\InferenceEngine\ProplogParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "G:\Users\Jeppe\Documents\Visual Studio 2012\Projects\Heureka\InferenceEngine\ProplogParser.fsy"
                                                                Disjunction (_1,_3) 
                   )
# 38 "G:\Users\Jeppe\Documents\Visual Studio 2012\Projects\Heureka\InferenceEngine\ProplogParser.fsy"
                 : expression));
# 242 "G:\Users\Jeppe\Documents\Visual Studio 2012\Projects\Heureka\InferenceEngine\ProplogParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "G:\Users\Jeppe\Documents\Visual Studio 2012\Projects\Heureka\InferenceEngine\ProplogParser.fsy"
                                                 Implication (_1,_3) 
                   )
# 39 "G:\Users\Jeppe\Documents\Visual Studio 2012\Projects\Heureka\InferenceEngine\ProplogParser.fsy"
                 : expression));
# 254 "G:\Users\Jeppe\Documents\Visual Studio 2012\Projects\Heureka\InferenceEngine\ProplogParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "G:\Users\Jeppe\Documents\Visual Studio 2012\Projects\Heureka\InferenceEngine\ProplogParser.fsy"
                                                  Implication (_3,_1) 
                   )
# 40 "G:\Users\Jeppe\Documents\Visual Studio 2012\Projects\Heureka\InferenceEngine\ProplogParser.fsy"
                 : expression));
# 266 "G:\Users\Jeppe\Documents\Visual Studio 2012\Projects\Heureka\InferenceEngine\ProplogParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "G:\Users\Jeppe\Documents\Visual Studio 2012\Projects\Heureka\InferenceEngine\ProplogParser.fsy"
                                                 Biimplication (_1,_3) 
                   )
# 41 "G:\Users\Jeppe\Documents\Visual Studio 2012\Projects\Heureka\InferenceEngine\ProplogParser.fsy"
                 : expression));
|]
# 279 "G:\Users\Jeppe\Documents\Visual Studio 2012\Projects\Heureka\InferenceEngine\ProplogParser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 13;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : expression =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
let Exp lexer lexbuf : expression =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 2))
let Op lexer lexbuf : expression =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 4))
