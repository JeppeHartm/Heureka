// Signature file for parser generated by fsyacc
module ProplogParser
type token = 
  | EOF
  | LPAR
  | RPAR
  | NEG
  | IMPL
  | RIMPL
  | BIIM
  | DISJ
  | CONJ
  | ID of (string)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_NEG
    | TOKEN_IMPL
    | TOKEN_RIMPL
    | TOKEN_BIIM
    | TOKEN_DISJ
    | TOKEN_CONJ
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM__startExp
    | NONTERM__startOp
    | NONTERM_Main
    | NONTERM_Exp
    | NONTERM_Op
/// This function maps integers indexes to symbolic token ids
val tagOfToken: token -> int

/// This function maps integers indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val Main : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (expression) 
val Exp : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (expression) 
val Op : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (expression) 
